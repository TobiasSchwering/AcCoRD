//
// The AcCoRD Simulator
// (Actor-based Communication via Reaction-Diffusion)
//
// Copyright 2016 Adam Noel. All rights reserved.
// 
// For license details, read LICENSE.txt in the root AcCoRD directory
// For user documentation, read README.txt in the root AcCoRD directory
//
// HOWTO_READ_CONFIG.txt - explains how to define simulation inputs
//
// Last revised for AcCoRD v0.5 (2016-04-15)
//
// WARNING: THIS IS NOT A REAL CONFIGURATION FILE!!!
// THE "COMMENTS" IN THIS FILE MAKE IT INVALID JSON!
// BUT ... THIS FILE DESCRIBES HOW TO WRITE A VALID CONFIGURATION FILE
//
// With that out of the way, welcome to this "tutorial" for preparing proper
// AcCoRD configuration files with cylindric regions and flow.
//
// This document is current as of v0.5 (2016-04-15).
//
// Please note that valid configuration files cannot have these comments
// preceded by "//". If you remove these comments and place a copy of
// this file where AcCoRD can "see" it, then you can run it in AcCoRD.
// AcCoRD looks for config files first in the current directory, then
// in a "config" subdirectory, then in a "../config/" directory.
// However, this should be unnecessary since the config folder includes
// a number of sample valid configuration files.
// Please refer to README.txt for instructions on running a simulation.
//
// AcCoRD input and summary output files use the JSON format. JSON stands for
// JavaScript Object Notation and it is defined at json.org.
// JSON is a way of organizing data into an object.
//
// AcCoRD requires that names (i.e., the words between double quotes
// and before a colon, e.g., "Output Filename") MUST be written EXACTLY as they are
// in this file. These names are hard-coded into AcCoRD.
//
// This file only explains use of the features added to accord by Tobias Schwering.
// For the usage of the main AcCoRD functions see the documentation of the main branch
// at https://github.com/adamjgnoel/AcCoRD.
//
// The ORDER of name/value pairs does not matter for it to be parsed correctly,
// but the NESTING does. So, for example, you can swap the order of "Output Filename"
// and "Simulation Control", but "Number of Repeats" must be defined inside the
// "Simulation Control" object.
//
// An object is encapsulated inside curly braces {}. A configuration file has one top-level
// object and a number of nested objects. An array is encapsulated inside square brackets [].
// The items in an object are name/value pairs, but the items in an array do not have
// associated names. Items are separated with commas.
//
// Extra white spaces are ignored.
//
// Read below to see a description of the individual parameters. As only additions to the 
// "Environment" structure are made, the rest is skipped exept for an explanation on how
// to define cylindrical actors

{
	"Environment":	{
		"Subvolume Base Size": 1e-6,
		"Region Specification": [
		// Array of regions in the environment. There must be at least ONE region
			{
			// Object describing the first region
			
				"Notes": "",
			
				"Label": "A",
			
				"Parent label": "",
				// Parent/Child nesting was not tested with Cylinder shapes, so there might be
				// unexpected errors
				
				"Shape": "Cylinder",
				// Shape of the region. As the additions focus on cylinders, only the parameters
				// necessary there are explained. All other shapes included in the main branch version
				// 0.5 still work
				
				"Type": "Normal",
				// Type of region. Currently only "Normal" is supported for cylinders
				
				"Anchor X Coordinate": 0,									
				"Anchor Y Coordinate": 0,
				"Anchor Z Coordinate": 0,
				// The anchor coordinates define the relative position of the region in GLOBAL
				// space (and NOT relative to its parent if it has one).
				// The anchor of a cylinder region is the "minimum coordinate" on its axis
				// i.e., (xmin, ymin, zmin).
				// So it is the center of its lower circular face
				// All units are meters.
																			
				"Is Region Microscopic?": true,
				// If true, all molecules in the region are individually tracked.
				// So far cylinders are only supported in the microscopic regime
													
				"Number of Subvolumes Along X": 10,
				"Number of Subvolumes Along Y": 0,
				"Number of Subvolumes Along Z": 0
				// These parameters define the length and orientation of the cylinder.
				// The rather crude definition was made to comply with the way rectangular boxes
				// are defined in AcCoRD. Cylinders can only be defined in one of the Cartesian
				// directions, there is no way to define an inclination so far. The "Number of
				// Subvolumes" parameters define the axis. As it has to align with one of the 
				// coordinate axes, two of them have to be zero and thus define the orientation.
				// The third, multiplied with the subvolume base size defined before, defines the
				// length of the cylinder. Starting point is the anchor.

				"Radius": 10e-6,
				// Defines the radius of the cylinder. Contrary to the length definition, this is
				// in total meters to comply with the definition of spheres
				

				//
				//!!!!  The remaining parameters apply to Cylinder regions ONLY !!!!
				// AcCoRD will produce warnings if any of these parameters are defined for a
				// region of an other shape
				//


				"Flow Velocity": 0,
				// Starting velocity in the cylinder, flowing in the direction of greater
				// coordinates. Use negative values to revert flow. For sinusoidal flow this is
				// the mean value. Unit is meters per second.

				"Flow Function Type": "Sinus",
				// Function type defining the time dependency of the flow. So far only "Sinus"
				// for sinusoidal flow and "Linear" for constant accel- or decelleration are 
				// available.

				"Flow Acceleration": 0,
				// Only evaluated if the flow function type is "Linear". Unit is meters per
				// square second

				"Flow Profile": "Uniform",
				// Profile describing the velocity distribution across the cylinders cross-section.
				// So far only "Uniform" and "Laminar" are implemented. Uniform flow has the same
				// magnitude of velocity everywhere in the cylinder while laminar flow models a
				// Newtonian fluid (e.i., one with a constant viscosity), where the velocity is
				// highest at the center, zero at the wall and has a paraboloidal profile in 
				// magnitude in between the center and the wall.

				"Flow Function Frequency": 10,
				// Frequency of the flow function, only implemented so far for sinusoidal flow
				// Unit is Hertz

				"Flow Function Amplitude": 600e-6
				// Amplitude ot the flow function, only implemented so far for sinusoidal flow
				// unit is meters per second
			}
		],
		"Actor Specification": [
		// To keep the actor description the same as for other regions, the definition for cylindrical
		// actors is rather cumbersome. So it is advised to use rectangular boxes as they are most
		// intuitively described. To build a cylindrical actor that is a "slice" of a region, it is
		// easier to define a box actor that prodrudes out of the region. AcCoRD will then use the
		// intersection of actor definition and region as the actual actor, which will only work if
		// it is again box-shaped or cylindrical.
			{
				"Outer Boundary": [0, 0, 10e-6, 10e-6, 1, 10e-6],
				// The coordinates of the actor. For a "Cylinder" actor, the format is
				// [x anchor, y anchor, z anchor, radius, orientation, length].
				// The definition of a cylindrical actor is so far only proven to work if the
				// intersection with ALL regions is again a valid (box, cylinder, sphere) shape.
				// The orientation defines parallel to which plane the end faces are defined.
				// 1 defines XY, 2 defines XZ and 3 YZ as the end face plane.
				// Units are meters (except for the orientation).
							
		]		
	}
}